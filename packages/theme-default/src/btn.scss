@use './variables/index' as v;
@use 'sass:map';

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.btn {
  $normal-padding: map.get(v.$vertical-padding, 'md');
  $large-padding: map.get(v.$vertical-padding, 'lg');
  $small-padding: map.get(v.$vertical-padding, 'sm');
  $justify-padding: v.$justify-padding;
  $min-height: calc(#{v.$inline-font-size} * #{v.$inline-line-height} + #{v.$border-size * 2} + #{$normal-padding * 2});
  $smaller-min-height: calc(
    #{v.$inline-font-size} * #{v.$inline-line-height} + #{v.$border-size * 2} + #{$small-padding * 2}
  );

  display: inline-block;
  vertical-align: middle;
  outline: none;
  cursor: pointer;
  letter-spacing: 1px;
  border: v.$border-size solid transparent;
  border-radius: v.$border-radius;
  padding: $normal-padding $justify-padding;
  font-size: v.$inline-font-size;
  min-height: $min-height;
  min-width: $min-height;
  font-weight: 400;
  user-select: none;
  color: v.$font-color !important;
  text-decoration: none;
  position: relative;
  background: transparent;
  will-change: box-shadow, opacity, background-color;
  transition: all 150ms ease-in-out;
  &::after {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: inherit;
    opacity: 0;
    transition: inherit;
  }
  &:not(.btn--link):not(.btn--outlined) {
    &::after {
      background: currentColor;
    }

    &:hover::after {
      opacity: 0.08;
    }
  }

  &:active,
  &--avtive {
    box-shadow: none !important;
  }
  &:link {
    color: currentColor;
  }
  &:not(.btn--outlined) {
    @each $key, $val in v.$theme-colors {
      &.#{$key} {
        color: var(--grey-0, white) !important;
      }
    }
  }
  &__content {
    line-height: v.$inline-line-height;
    text-overflow: ellipsis;
    vertical-align: middle;
  }

  &__loading {
    letter-spacing: 2px;
    vertical-align: middle;
  }

  &__spinner {
    width: 1em;
    height: 1em;
    border-radius: 50%;
    border: 2px solid transparent;
    border-top-color: currentColor;
    display: inline-block;
    animation: spin 1s infinite ease-in-out;
    vertical-align: middle;

    & + .btn__loading {
      margin-left: 4px;
    }
  }

  &--small {
    padding: $small-padding $justify-padding;
    min-height: $smaller-min-height;
  }

  &--large {
    font-size: v.$larger-font-size;
    padding: $large-padding $justify-padding;
  }

  &--round,
  &--icon {
    padding: $normal-padding;
    overflow: hidden;
    &.btn--large {
      padding: $large-padding;
    }

    &.btn--small {
      padding: $small-padding;
    }
  }

  &--round {
    border-radius: 50%;
  }

  &--flat,
  &--outlined,
  &--link,
  &--disabled {
    box-shadow: none !important;
  }

  &--link {
    border-radius: 0;
    &::after {
      position: absolute;
      content: '';
      bottom: 0;
      left: 0;
      right: 0;
      top: auto;
      height: 2px;
      background-color: currentColor;
      opacity: 0;
      transition: opacity 300ms ease;
    }
    &:hover::after,
    &.btn--active::after {
      opacity: 1;
    }
  }

  &--tile {
    border-radius: 0;
  }
  &--outlined {
    border-color: v.$border-color;
    &:hover,
    &:active,
    &:focus {
      border-color: currentColor;
    }

    &:focus {
      &::after {
        background: transparent;
        box-shadow: 0 0 0 4px currentColor !important;
        opacity: 0.2;
      }
    }
  }

  &--block {
    display: block;
    width: 100%;
  }

  &--disabled {
    background-color: var(--grey-3, grey) !important;
    cursor: not-allowed;
  }
}
